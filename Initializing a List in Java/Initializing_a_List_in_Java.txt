1)The Java.util.List is a child interface of Collection. 
2)It is an ordered collection of objects in which duplicate 
  values can be stored. 
3)Since List preserves the insertion order, 
4)it allows positional access and insertion of elements.
====================List-Initialization====================================== 
1)List Interface is Initialisation by Using List implemented Classes 
======================================================================
   ArrayList, 
   LinkedList, 
   Vector and 
   Stack classes.
List is an interface, and the instances of List can be created in the following ways:

List a = new ArrayList();
List b = new LinkedList();
List c = new Vector(); 
List d = new Stack(); 
   
 Below are the following ways to initialize a list:

1)Using List.add() method:
===========================
Since list is an interface, one can’t directly instantiate it.
However, one can create objects of those classes which have implemented 
this interface and instantiate them.
--------------------------------------------------------
Few classes which have implemented the List interface 
are Stack, ArrayList,LinkedList, Vector
List<Integer> list=new ArrayList<Integer>();
List<Integer> llist=new LinkedList<Integer>();
List<Integer> stack=new Stack<Integer>();
================================================
2)List can be Initialisation using Double Brace: 
================================================
Double Brace Initialisation can also be used to do the above work.
Syntax:

List<Integer> list=new ArrayList<Integer>(){{
                        add(1);
                        add(2);
                        add(3);
                          }};
                          
3) Using Collections class methods:
===================================
There are various methods in Collections class that can be used to instantiate a list.
They are:
1)Using Collections.addAll() Method:=
=====================================
Collections class has a static method addAll() which can be used to initialize a list.
Collections.addAll() take in any number of elements after
it is specified with the Collection in which the elements are to be inserted.
--------------------------------------------------------------------------
Syntax:

List<Integer> list = Collections.EMPTY_LIST;
Collections.addAll(list = new ArrayList<Integer>(), 1, 2, 3, 4); 
----------------------------------------------------------------------
2)Using Collections.unmodifiableList() Method:=
===============================================
Collections.unmodifiableList() returns a list which can’t be altered i.e.
 it can neither add or delete an element. 
 Any attempt to modify the list will result in an UnsupportedOperationExample.
 ------------------------------------------------------------------------------
 Syntax:

 List<Integer> list = Collections.unmodifiableList(Arrays.asList(1, 2, 3));
------------------------------------------------------------------------------ 
if we modify the List it will throw the Exception:
----------------------------------------------------
    java.lang.UnsupportedOperationException
	at java.util.Collections$UnmodifiableList.set(Unknown Source)
	at com.nt.List.List_Initialize_Using_Collections_unmodifiableList_Array_asList.
	main(List_Initialize_Using_Collections_unmodifiableList_Array_asList.java:20)
	
List::[1, 2, 3, 4, 8, 5]
Trying to modify the list
----------------------------------------------------------------------------------
3)Using Collections.singletonList() Method:=
===========================================
Collections.singletonList() returns an immutable list consisting of one element only.     
-----------------------------------------------------                   
Syntax:

List<Integer> list = Collections.singletonList(2);
--------------------------------------------------------------------------------
4)Using Java 8 Stream:=
With the introduction of Stream and functional programming in Java 8,
now one can construct any stream of objects and then collect them as a list.

Syntax:

1.  List<Integer> list 
            = Stream.of(1, 2, 3)
                .collect(Collectors.toList());
2.  List<Integer> list 
            = Stream.of(1, 2, 3)
                .collect(Collectors.toCollection(ArrayList::new));
3.  List<Integer> list 
            = Stream.of(1, 2, 3, 4)
                .collect(Collectors.collectingAndThen(Collectors.toList(), 
                            Collections::unmodifiableList));

------------------------------------------------------------------------------------------
5)Using Java 9 List.of():
===========================
Java 9 introduced List.of() method which takes in any number of arguments
and constructs a compact and unmodifiable list out of them.

Syntax:

List<Integer> unmodifiableList = List.of(1, 2, 3);
------------------------------------------------------------------------------------------
